===================
Simple match expressions
===================

let result = match (value) {
  Some(x) => x + 1
  None => 0
}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (number)))
      (match_arm
        (match_pattern
          (identifier))
        (number)))))

===================
Match with block expressions
===================

let result = match (shape) {
  Circle(r) => {
    let area = r * r * 3
    area
  }
  Rectangle(width) => {
    let area = width * 10
    area
  }
}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (block_expression
          (let_assignment
            (identifier)
            (binary_expression
              (binary_expression
                (identifier)
                (identifier))
              (number)))
          (identifier)))
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (block_expression
          (let_assignment
            (identifier)
            (binary_expression
              (identifier)
              (number)))
          (identifier))))))

===================
Match with literals and wildcards
===================

let result = match (value) {
  true => "yes"
  false => "no"
  "hello" => "greeting"
  42 => "answer"
  _ => "anything else"
}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (boolean))
        (string_literal))
      (match_arm
        (match_pattern
          (boolean))
        (string_literal))
      (match_arm
        (match_pattern
          (string_literal))
        (string_literal))
      (match_arm
        (match_pattern
          (number))
        (string_literal))
      (match_arm
        (match_pattern
          (wildcard))
        (string_literal)))))

===================
Match with literal in constructor
===================

let result = match (opt) {
  Some(42) => "found answer"
  Some("hello") => "found greeting"
  Some(true) => "found truth"
  None => "found nothing"
}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (number)  )
        (string_literal))
      (match_arm
        (match_pattern
          (identifier)
          (string_literal))
        (string_literal))
      (match_arm
        (match_pattern
          (identifier)
          (boolean))
        (string_literal))
      (match_arm
        (match_pattern
          (identifier))
        (string_literal)))))

===================
Match in function expression
===================

let handler = (result) =>
  match (result) {
    Ok(value) => {
      let msg = "Success: " + value
      msg
    }
    Err(msg) => {
      let err = "Error: " + msg
      err
    }
  }

---

(source_file
  (let_assignment
    (identifier)
    (function_expression
      (parameter_list
        (identifier))
      (match_expression
        (identifier)
        (match_arm
          (match_pattern
            (identifier)
            (identifier))
          (block_expression
            (let_assignment
              (identifier)
              (binary_expression
                (string_literal)
                (identifier)))
            (identifier)))
        (match_arm
          (match_pattern
            (identifier)
            (identifier))
          (block_expression
            (let_assignment
              (identifier)
              (binary_expression
                (string_literal)
                (identifier)))
            (identifier)))))))

===================
Match with trailing comma and newlines
===================

let result = match (value) {
  Some(x) => x
  None => 0
}

let result2 = match (value) {

  Some(x) =>
    x + 1

  None =>
    0

}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (identifier))
      (match_arm
        (match_pattern
          (identifier))
        (number))))
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (number)))
      (match_arm
        (match_pattern
          (identifier))
        (number)))))

===================
Match with mixed patterns
===================

let result = match (value) {
  Some(42) => "found answer"
  Some(x) => "found " + x
  None => "nothing"
  true => "boolean true"
  "hello" => "string hello"
  _ => "anything else"
}

---

(source_file
  (let_assignment
    (identifier)
    (match_expression
      (identifier)
      (match_arm
        (match_pattern
          (identifier)
          (number))
        (string_literal))
      (match_arm
        (match_pattern
          (identifier)
          (identifier))
        (binary_expression
          (string_literal)
          (identifier)))
      (match_arm
        (match_pattern
          (identifier))
        (string_literal))
      (match_arm
        (match_pattern
          (boolean))
        (string_literal))
      (match_arm
        (match_pattern
          (string_literal))
        (string_literal))
      (match_arm
        (match_pattern
          (wildcard))
        (string_literal)))))
