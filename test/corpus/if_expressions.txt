===================
Simple if expressions
===================

let x = if (true) 1 else 2
let y = if (false) "yes" else "no"

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (boolean)
      (number)
      (number)))
  (let_assignment
    (identifier)
    (if_expression
      (boolean)
      (string_literal)
      (string_literal))))

===================
Nested if expressions
===================

let x = if (a) 
  if (b) 1 
  else 2
else 3

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (identifier)
      (if_expression
        (identifier)
        (number)
        (number))
      (number))))

===================
If expressions with blocks
===================

let x = if (condition) {
  let y = 1
  y + 2
} else {
  let z = 3
  z + 4
}

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (identifier)
      (block_expression
        (let_assignment
          (identifier)
          (number))
        (binary_expression
          (identifier)
          (number)))
      (block_expression
        (let_assignment
          (identifier)
          (number))
        (binary_expression
          (identifier)
          (number))))))

===================
If-else if-else chains
===================

let x = if (a > 0) {
  "positive"
} else if (a < 0) {
  "negative"
} else {
  "zero"
}

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (binary_expression
        (identifier)
        (number))
      (block_expression
        (string_literal))
      (if_expression
        (binary_expression
          (identifier)
          (number))
        (block_expression
          (string_literal))
        (block_expression
          (string_literal))))))

===================
Multiple else-if chains
===================

let grade = if (score >= 90) {
  "A"
} else if (score >= 80) {
  "B"
} else if (score >= 70) {
  "C"
} else if (score >= 60) {
  "D"
} else {
  "F"
}

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (binary_expression
        (identifier)
        (number))
      (block_expression
        (string_literal))
      (if_expression
        (binary_expression
          (identifier)
          (number))
        (block_expression
          (string_literal))
        (if_expression
          (binary_expression
            (identifier)
            (number))
          (block_expression
            (string_literal))
          (if_expression
            (binary_expression
              (identifier)
              (number))
            (block_expression
              (string_literal))
            (block_expression
              (string_literal))))))))

===================
Nested if-else if chains
===================

let result = if (x > 0) {
  if (y > 0) {
    "first quadrant"
  } else if (y < 0) {
    "fourth quadrant"
  } else {
    "positive x-axis"
  }
} else if (x < 0) {
  if (y > 0) {
    "second quadrant"
  } else if (y < 0) {
    "third quadrant"
  } else {
    "negative x-axis"
  }
} else {
  if (y > 0) {
    "positive y-axis"
  } else if (y < 0) {
    "negative y-axis"
  } else {
    "origin"
  }
}

---

(source_file
  (let_assignment
    (identifier)
    (if_expression
      (binary_expression
        (identifier)
        (number))
      (block_expression
        (if_expression
          (binary_expression
            (identifier)
            (number))
          (block_expression
            (string_literal))
          (if_expression
            (binary_expression
              (identifier)
              (number))
            (block_expression
              (string_literal))
            (block_expression
              (string_literal)))))
      (if_expression
        (binary_expression
          (identifier)
          (number))
        (block_expression
          (if_expression
            (binary_expression
              (identifier)
              (number))
            (block_expression
              (string_literal))
            (if_expression
              (binary_expression
                (identifier)
                (number))
              (block_expression
                (string_literal))
              (block_expression
                (string_literal)))))
        (block_expression
          (if_expression
            (binary_expression
              (identifier)
              (number))
            (block_expression
              (string_literal))
            (if_expression
              (binary_expression
                (identifier)
                (number))
              (block_expression
                (string_literal))
              (block_expression
                (string_literal)))))))))
