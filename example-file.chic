import { useState, useEffect } from "preact/hooks"
import defaultExport from "some-module"
import defaultExport, { namedExport } from "another-module"
bind { TypeA as string, TypeB as number } from "types-module"
bind SingleType as boolean from "boolean-module"

// Single-line comment
/* Multi-line
   comment */

// Primitive Types
type Age = number
type Name = string
type Active = boolean
type Nothing = void

// Tuple Types
type Point2D = [number, number]
type Point3D = [number, number, number]
type Location = [string, number, number,]  // with trailing comma
type Mixed = [Point2D, string, number]

// Record Types - Simple
type Person = {
  name: string,
  age: number,
  active: boolean
}

// Record Types - With Type References
type Employee = {
  id: number,
  person: Person,
  department: string
}

// Record Types - Nested
type Address = {
  street: {
    number: number,
    name: string
  },
  city: string,
  coords: [number, number]
}

// Record Types - Single Field
type Counter = { value: number }

// Record Types - Complex Nesting
type UserProfile = {
  personal: Person,
  work: Employee,
  addresses: {
    home: Address,
    work: Address
  },
  locations: [
    [number, number],
    string
  ]
}

// ADT Types
type Option = None | Some(number)
type Result = Ok(string) | Err({ message: string })
type Shape = Circle | Square | Rectangle(number) | Triangle({ base: number, height: number })

// Generic Types
type Container<T> = { value: T }
type Pair<A, B> = [A, B]

// Function Types
type Callback = (number) => void
type Transformer = (string, number) => string
type Complex = (a: number, b: string) => [number, string]

// Variables and Constants
let x = 42
let negative = -42
let decimal = 3.14
let negativeDecimal = -3.14
const PI = 3.14
const message = "Hello"
const flag = true

// Destructuring Assignments
let { a, b, c } = { a: 1, b: 2, c: 3 }
const [first, second] = [123, 456]

// Arrays
const emptyArray = []
const numbers = [1, 2, 3]
const mixed = ["hello", 42, true]
const nested = [[1, 2], [3, 4]]

// Records
const person = {
  name: "Alice",
  age: 30,
  active: true
}

const complex = {
  handler: (x) => x * 2,
  result: match (value) {
    1 => "one"
    _ => "other"
  },
  computed: {
    let x = 10
    x + 5
  }
}

// Function Expressions
const square = (x) => x * x
const add = a => a + a  // Parenless function
const multiply = (a, b) => a * b

// Function with block body and pattern matching
const greet = (name, style) => {
  let greeting = match (style) {
    Casual => "Hey"
    Formal => "Hello"
    Custom(text) => text
    _ => "Hi"
  }
  greeting + " " + name
}

// Pattern matching with literals and block expressions
const describe = (value) =>
  match (value) {
    Some(42) => {
      let msg = "Found the answer!"
      msg
    }
    Some(x) => "Got " + x
    None => "Nothing here"
    true => "Boolean true"
    false => "Boolean false"
    "hello" => "A greeting"
    _ => "Something else"
  }

// JSX Expressions
const App = () =>
  match (user) {
    "world" => <h1>{"Hello WORLD!"}</h1>
    _ => <h1>{"Hello " + user}</h1>
  }

const Component = () => <div className="container" count={5}>
  <h1>Title</h1>
  <p>Content</p>
  {dynamic}
  <Button onClick={handler} />
</div>

// Binary Operations
const sum = a + b
const product = a * b
const comparison = a == b
const greaterThan = a > b

// Call Expressions
const result = calculate(1, 2)
const chainedResult = obj.method(arg1).property

// Index Expressions
const item = array[0]
const nestedItem = matrix[1][2]

const user = "world"

const rand = <table>{"boxlike"}</table> 

export { App, greet, describe, square, add }
